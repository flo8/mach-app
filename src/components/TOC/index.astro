---
import TOCHeading from './Heading.astro'

export type Props = {
  pageHeadings: Array<{ depth: number; text: string; slug: string }>;
  maxDepth?: number;
  classes?: string
};
const { pageHeadings, maxDepth, classes } = Astro.props;

const computedMaxDepth = maxDepth !== undefined ? maxDepth : 4

const toc = buildToc(pageHeadings);

function buildToc(headings) {
  const toc = [];
  const parentHeadings = new Map();
  headings.forEach((h) => {
    const heading = { ...h, subheadings: [] };
    if (heading.depth <= computedMaxDepth) {
      parentHeadings.set(heading.depth, heading);
      // Change 2 to 1 if your markdown includes your <h1>
      if (heading.depth === 2) {
        toc.push(heading);
      } else {
        parentHeadings.get(heading.depth - 1).subheadings.push(heading);
      }
    }
  });
  return toc;
}
---

<div id='toc' class={classes}>
  <nav class=''>
    <h2 class='mb-4 font-medium uppercase tracking-widest'>Table of content</h2>
    <ul class='space-y-4 text-sm'>
      {toc.map((heading) => <TOCHeading heading={heading} />)}
    </ul>
  </nav>
</div>

<script>
  const setCurrent: IntersectionObserverCallback = (entries) => {
    for (let entry of entries) {
      const { id } = entry.target;
      const tocHeadingEl = document.querySelector(`#toc a[href="#${id}"]`);
      if (!tocHeadingEl) return;
      if (entry.isIntersecting) {
        document.querySelectorAll('#toc a').forEach((e) => e.classList.remove('italic')); // TODO better style
        tocHeadingEl.classList.add('italic');
      }
    }
  };

  const observerOption: IntersectionObserverInit = {
    rootMargin: '0px 0px -66%',
    threshold: 1
  };
  const headingObserver = new IntersectionObserver(setCurrent, observerOption);
  document.querySelectorAll(':is(article,.article) :is(h2,h3,h4)').forEach((heading) => headingObserver.observe(heading));
</script>
