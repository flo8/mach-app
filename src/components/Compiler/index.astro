---
import { compile } from 'html-to-text';
import Icon from '@components/DynamicHeroIcon.vue';
import Spinner from '@components/svg/Spinner.vue';

type Props = {
  initialState?: string;
  title?: string;
};
const slot = await Astro?.slots?.render('default');

const options = {
  wordwrap: 130
};
const compiledConvert = compile(options);

const hasHtml = slot?.includes('astro-code');
const slotTextArray = hasHtml ? null : slot?.split(`\n`);
const texts = slotTextArray?.map(compiledConvert);
const codeFromSlot = hasHtml ? compiledConvert(slot) : texts?.join('\n') || null;
const initialState = codeFromSlot || Astro.props.initialState || '';
const widgetId = Math.floor(Math.random() * 1000);
const { title } = Astro.props;
import { erroMsg, locales } from '@constants/localize';
const { compiler } = locales;
---

<!-- <div class='frappe'>
  <h1 class='bg-ctp-base text-ctp-pink'>Hello world!</h1>
</div> -->
<div id={'cm-main-' + widgetId} class='cm-widget cm-wrap ͼo mb-4' data-widget-id={widgetId} data-cm-state={initialState}>
  <div class='cm-header p-2 bg-slate-900 flex justify-between items-center'>
    <h5 class='title m-0 text-slate-400 font-bold'>{title}</h5>
    <div class='menu space-x-2'>
      <button id='run-code' class='run-code-btn o-btn o-btn--small o-btn--primary'>
        <span class='o-btn__wrapper'>
          <span class='loader'>
            <Spinner size={6} color='white' fill='primary-800' class='fill-primary-800' />
            <span class='o-o-btn__label'>{compiler.running}</span>
          </span>
          <span class='o-o-btn__label not-loading'>{compiler.run}</span>
        </span>
      </button>
      <button class='run-code-btn o-btn o-btn--small o-btn--primary o-btn--outlined-primary border-slate-400'>
        <span class='o-btn__wrapper'>
          <span class='loader'>
            <Spinner size={6} color='white' fill='slate-600' class='fill-slate-600' />
            <span class='o-o-btn__label text-slate-400'>{compiler.formating}</span>
          </span>
          <span class='o-o-btn__label text-slate-400 not-loading'>{compiler.format}</span>
        </span>
      </button>
      <button class='toggleFullScreen o-btn o-btn--small o-btn--primary o-btn--outlined-primary border-slate-400'>
        <span class='o-btn__wrapper'>
          <span class='o-o-btn__label text-slate-400'>
            <Icon name='ArrowsPointingOutIcon' outline={true} classes='w-5 h-5 show-fullscreen' />
            <Icon name='ArrowsPointingInIcon' outline={true} classes='w-5 h-5 hide-fullscreen hidden' />
          </span>
        </span>
      </button>
    </div>
  </div>
  <div class='codemirror-widget pt-2 border-t border-slate-500 border-b'></div>
  <div class='cm-footer px-2 divide-y divide-dashed divide-slate-400'>
    <div class='py-3 cm-result log-wrapper text-base'>
      <div class='loading hidden'>{compiler.eval}</div>
      <div class='cm-output hidden pl-4'></div>
    </div>
  </div>
</div>

<script>
  //https://www.raresportan.com/how-to-make-a-code-editor-with-codemirror6/
  //https://codesandbox.io/s/codemirror-6-demo-pl8dc?file=/src/index.js
  import { EditorView } from '@codemirror/view';
  import $ from 'cash-dom';
  import { supabase } from '@utils/supabase';
  import { basicSetup } from 'codemirror';
  import { Compartment, EditorState } from '@codemirror/state';
  import { StreamLanguage } from '@codemirror/language';
  import { go } from '@codemirror/legacy-modes/mode/go';
  import { oneDark } from '@codemirror/theme-one-dark';

  interface GoCompilerRunEvent {
    Message: string;
    Kind: string;
    Delay: number;
  }
  interface GoCompilerRun {
    Errors: string;
    Events: GoCompilerRunEvent[];
    Error: string;
  }
  interface GoCompilerFMT {
    Body: string;
    Error: string;
  }
  interface GoCompiler {
    events: GoCompilerRun;
    formated: GoCompilerFMT;
  }
  $(function () {
    $('.cm-widget').each((idx, elem) => {
      const widget = $(elem);
      const widgetId = widget.attr('data-widget-id');
      const initialeState = widget.attr('data-cm-state') || '';
      const myTheme = EditorView.baseTheme({
        '&.cm-editor': {
          fontSize: '16px'
        },
        '.cm-scroller': {
          fontFamily: 'Jet Brains Mono, monospace, Consolas, Menlo, Monaco, source-code-pro, Courier New '
        }
      });
      let language = new Compartment(),
        tabSize = new Compartment();

      // const firstState = 'package main\n\nimport "fmt";\n\nfunc main() {\n  fmt.Println("Hello,BARTO")\n}';
      const state = EditorState.create({
        doc: initialeState,
        extensions: [basicSetup, StreamLanguage.define(go), tabSize.of(EditorState.tabSize.of(2)), oneDark, myTheme]
      });
      const widgetCm = widget.find('.codemirror-widget')[0];
      let view = new EditorView({
        state,
        parent: widgetCm
      });

      const runCodeBtn = widget.find('.run-code-btn');
      const loader = widget.find('.loading');
      const output = widget.find('.cm-output');
      const toggleFullScreen = widget.find('.toggleFullScreen');
      const bodyElem = $('body');

      toggleFullScreen.on('click', function (e: Event) {
        const buttonClicked = $(e.currentTarget as Element);
        const iconShowFullScreen = buttonClicked.find('.show-fullscreen');
        const iconHideFullScreen = buttonClicked.find('.hide-fullscreen');
        iconShowFullScreen.toggleClass('hidden');
        iconHideFullScreen.toggleClass('hidden');
        widget.toggleClass('fullscreen');
        bodyElem.toggleClass('cm-fullscreen');
      });

      runCodeBtn.on('click', async function (e: Event) {
        const buttonClicked = $(e.currentTarget as Element).attr('id');
        const wrapper = $(e.currentTarget as Element).find('.o-btn__wrapper');
        wrapper.addClass('is-loading');
        if (buttonClicked === 'run-code') {
          loader.removeClass('hidden');
        }
        output.addClass('hidden');

        const code = view.state.doc.toString();
        const body = { code, compile: buttonClicked === 'run-code', fmt: true };
        try {
          const { data, error } = await supabase.functions.invoke<GoCompiler>('go-compile', { body });
          if (data) {
            const resultEvents = data?.events?.Events?.map((e) => '<p class="m-0">' + e.Message.split('\n').join('<br>') + '</p>');
            const resultErrors = data?.events?.Errors ? '<p class="m-0 text-rose-500">' + data.events.Errors.split('\n').join('<br>') + '</p>' : '';

            loader.addClass('hidden');
            wrapper.removeClass('is-loading');

            output.html(data?.events?.Events ? resultEvents.join('') : resultErrors);
            if (output.html()) {
              output.removeClass('hidden');
            }

            if (data.formated.Body) {
              view.dispatch({ changes: { from: 0, to: view.state.doc.length, insert: data.formated.Body } });
            }
          }
        } catch (error) {}
      });
    });
  });
</script>

<style is:inline>
  @font-face {
    font-family: 'Jet Brains Mono';
    src: url('/fonts/JetBrainsMono-Regular.woff2') format('woff2');
    font-weight: normal;
    font-style: normal;
    font-display: swap;
  }
  .cm-output:before {
    content: '›';
    opacity: 0.8;
    margin-left: -1rem;
    width: 0.5rem;
    position: absolute;
    text-align: center;
    font-size: 1.125rem;
  }

  body.cm-fullscreen {
    overflow: hidden !important;
  }

  .fullscreen {
    position: fixed;
    height: 100vh;
    width: 100%;
    z-index: 1000;
    top: 0;
    left: 0;
  }

  .run-code-btn .o-btn__wrapper .loader {
    display: none;
  }
  .run-code-btn .o-btn__wrapper.is-loading .loader {
    display: initial;
  }

  .run-code-btn .o-btn__wrapper.is-loading .not-loading {
    display: none;
  }
</style>
