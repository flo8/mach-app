---
import { Collection, CollectionStaticProps, CourseDataProps } from '@models/courses';
import { CollectionEntry } from 'astro:content';
import CoursesTableItem from './Item.astro';

export type Props = {
  courseId: string;
  courses: CollectionEntry<Collection>[];
  params?: {
    course: string;
    slug: string;
  };
};
type GroupCourse = {
  [key: string]: CollectionEntry<Collection>[];
};
const { courseId, courses, params } = Astro.props;

const grouped: GroupCourse = courses?.reduce((acc, curr) => {
  const { section = '' } = curr.data as CourseDataProps;
  if (!acc[section]) acc[section] = []; //If this type wasn't previously stored
  acc[section].push(curr);
  return acc;
}, {});
---

<div id='course-toc'>
  <nav>
    <h2 class='mt-0'>Table of content</h2>
    <ul class='list-none space-y-8 p-0 text-sm'>
      {
        grouped &&
          Object.keys(grouped).map((key, idx) => {
            const coursesByroup = grouped[key];
            return (
              <li class='space-y-4'>
                <div class='p-3 bg-gray-200 border border-gray-200 rounded-md '>
                  <div>SECTION {idx + 1}</div>
                  <h3 class='m-0'>{key}</h3>
                </div>
                <ul class='list-none p-0'>
                  {coursesByroup.map((c, idx) => {
                    return <CoursesTableItem index={idx} course={c} params={params} />;
                  })}
                </ul>
              </li>
            );
          })
      }
    </ul>
  </nav>
</div>

<style></style>
<script></script>
