---
import { Collection, CourseDataProps, GroupCourse } from '@models/courses';
import { CollectionEntry } from 'astro:content';
import Icon from '@components/DynamicHeroIcon.vue';
import Group from './Group.astro';

export type CompProps = {
  courseId: string;
  coursePage?: boolean;
  pathname?: string;
  params?: {
    course: string;
    slug: string;
  };
};

export type Props = CompProps & {
  courses: CollectionEntry<Collection>[];
};
const { courseId, courses, params, coursePage } = Astro.props;

const { pathname } = Astro.url;

const grouped: GroupCourse = courses?.reduce((acc, curr) => {
  const { section = '' } = curr.data as CourseDataProps;
  if (!acc[section]) acc[section] = []; //If this type wasn't previously stored
  acc[section].push(curr);
  return acc;
}, {});
---

<astro-toc-wrapper data-message={JSON.stringify({ courseId, params, pathname, coursePage })}>
  <div id='course-toc'>
    <nav>
      <h2 class='mt-0'>Table of content</h2>

      <ul class='list-none space-y-8 p-0 text-sm' data-course={courseId}>
        {
          grouped &&
            Object.keys(grouped).map((key, idx) => {
              const coursesByroup = grouped[key];
              return <Group courses={coursesByroup} key={key} sectionIdx={idx} />;
            })
        }
      </ul>
    </nav>
  </div>
</astro-toc-wrapper>

<script>
  import $ from 'cash-dom';
  import { CompProps } from './index.astro';
  import { courseTaken } from '@stores/courses';
  import { onSet } from 'nanostores';

  class AstroTOCWrapper extends HTMLElement {
    constructor() {
      super();
      if (!this?.dataset?.message) {
        return;
      }
      const { courseId, params, pathname, coursePage }: CompProps = JSON.parse(this.dataset.message);
      $(function () {
        const toc = $('#course-toc');
        if (!toc) {
          return;
        }
        onSet(courseTaken, ({ newValue, abort }) => {
          const listVisible = newValue.find((l) => l.slug === courseId);
          listVisible?.learning_lesson.forEach((lesson) => {
            const id = `${courseId}/${lesson.slug}`;
            const lessonDone = toc.find(`[data-slug="${id}"]`);
            if (lessonDone) {
              lessonDone.find('.is-done').removeClass('hidden');
              lessonDone.find('.lesson-idx').addClass('hidden');
            }
          });
          if (!coursePage && params) {
            const id = `${courseId}/${params.slug}`;
            const lessonViewed = toc.find(`[data-slug="${id}"]`);
            lessonViewed.find('.is-done').addClass('hidden');
            lessonViewed.find('.lesson-idx').addClass('hidden');
            lessonViewed.find('.in-progress').removeClass('hidden');
          }
        });
      });
    }
  }

  customElements.define('astro-toc-wrapper', AstroTOCWrapper);
</script>
