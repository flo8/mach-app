---
import { coursePager } from '@utils/collections';
import { Collection } from '@models/courses';
import { CollectionEntry } from 'astro:content';
import Spinner from './svg/Spinner.astro';
import Icon from '@components/DynamicHeroIcon.vue';
import { getCourseInfo } from '@utils/collections';

export interface Props {
  course?: string;
  slug?: string;
  title: string;
}

const { course, slug, title } = Astro.props;
const courseInfo = await getCourseInfo('courses', `${course}`);

let prev: CollectionEntry<Collection> | null = null;
let next: CollectionEntry<Collection> | null = null;
let showPager = false;
let nextLink: string = `${import.meta.env.BASE_URL}`;
if (course && slug) {
  const result = await coursePager(course as string, slug as string);

  prev = result.prevEntry;
  next = result.nextEntry;
  showPager = prev !== null || next !== null;
  nextLink = next ? `${next?.collection}/${next?.slug}/` : '';
}
---

<astro-message-wrapper data-message={JSON.stringify({ course, slug, next: nextLink, courseInfo, title })}>
  {
    showPager && (
      <div class='flex flex-col justify-start md:flex-row md:items-center md:justify-between pt-6 md:pt-8'>
        {prev && (
          <a
            href={`${import.meta.env.BASE_URL}${prev?.collection}/${prev?.slug}/`}
            class='inline-flex items-center px-4 py-2 text-sm font-medium group bg-background-page rounded-lg transition-colors border border-border-input text-link hover:text-white hover:bg-primary hover:border-primary hover:no-underline mr-auto'
          >
            <Icon name='ArrowLeftIcon' outline={true} classes='w-5 h-5 mr-2' />

            <div class='ml-2'>
              <span class='transition-colors text-text-muted group-hover:text-white'>Previous chapter:</span> <br />
              {prev?.data.title}
            </div>
          </a>
        )}
        {next && (
          <a
            id='goto-next-chapter'
            href={`${import.meta.env.BASE_URL}${next?.collection}/${next?.slug}/`}
            class='ml-auto inline-flex items-center px-4 py-2 text-sm font-medium group bg-background-page rounded-lg transition-colors border border-border-input text-link hover:text-white hover:bg-primary hover:border-primary hover:no-underline mt-2 md:mt-0'
          >
            <span class='hidden loading-spinner'>
              <Spinner />
            </span>
            <div class='mr-2'>
              <span class='transition-colors text-text-muted group-hover:text-white'>Next chapter:</span> <br />
              {next?.data.title}
            </div>

            <Icon name='ArrowRightIcon' outline={true} classes='w-5 h-5 ml-2' />
          </a>
        )}
      </div>
    )
  }
</astro-message-wrapper>

<script>
  import { PayloadCourseTaken, setCourseTaken, courseTaken } from '@stores/courses';

  class AstroMessageWrapper extends HTMLElement {
    constructor() {
      super();
      if (!this?.dataset?.message) {
        return;
      }
      const data: PayloadCourseTaken = JSON.parse(this.dataset.message);
      const button = this.querySelector('#goto-next-chapter');
      if (button) {
        button?.addEventListener('click', onClickNext);
      }
      /***
       * Save lesson done on "click next"
       */
      async function onClickNext(this: HTMLElement, ev: Event) {
        ev.preventDefault();
        this.removeEventListener('click', onClickNext);

        const loader = button?.querySelector('.loading-spinner');
        loader?.classList.toggle('hidden');
        try {
          await setCourseTaken(data);
        } catch (error) {}
        let url = data.next;
        window.location.assign(`${import.meta.env.BASE_URL}${url}`);
      }

      /**
       * save lesson done on scroll if is the last lesson
       */
      if (data?.next === '') {
        const scrollEventListener = async function () {
          const result = isInViewport(elem);
          if (result) {
            document.removeEventListener('scroll', scrollEventListener);
            try {
              const res = await setCourseTaken(data);
            } catch (error) {}
          }
        };
        const elem = this;
        document.addEventListener('scroll', scrollEventListener, {
          passive: true
        });
      }
    }
  }
  function isInViewport(element) {
    const rect = element.getBoundingClientRect();
    return rect.top >= 0 && rect.left >= 0 && rect.bottom <= (window.innerHeight || document.documentElement.clientHeight) && rect.right <= (window.innerWidth || document.documentElement.clientWidth);
  }

  customElements.define('astro-message-wrapper', AstroMessageWrapper);
</script>
