---
import { getAllCollectionLessons, getCourseInfo } from '@utils/collections';
import PaginatedCourse from '@components/PaginatedCourse.astro';
import ContentLayout from '@ContentLayout';
import Quiz from '@components/Quiz/Question.vue';
import TOC from '@components/TOC/index.astro';
import { CollectionEntry } from 'astro:content';
import { Collection, CourseParams } from '@models/courses';

interface Props {
  entry: CollectionEntry<Collection>;
  courses: CollectionEntry<Collection>[];
}
export async function getStaticPaths() {
  const courses = await getAllCollectionLessons('courses');

  return courses.map((entry) => {
    const directories = entry.slug.split('/');

    const course = [...directories].shift();
    const slug = [...directories].pop();

    return {
      params: { course, slug },
      props: { entry, courses: courses.filter((c) => c.slug.includes(`${course}/`)) }
    };
  });
}

const { course, slug } = Astro.params;
const { entry, courses } = Astro.props;
const { Content, headings, remarkPluginFrontmatter } = await entry.render();

let params: CourseParams | undefined = undefined;
if (course && slug) {
  params = { course, slug };
}
const courseInfo = await getCourseInfo('courses', `${course}`);

const lastUrl = {
  url: Astro.url.pathname,
  title: entry.data.title,
  course: courseInfo?.title || '',
  main: false
};
---

<ContentLayout frontmatter={remarkPluginFrontmatter} courseDir={Astro.props} params={params}>
  <astro-lesson-wrapper data-message={JSON.stringify(lastUrl)} }>
    <Content />
  </astro-lesson-wrapper>
  {entry?.data?.quiz && <Quiz client:only='vue' slug={`${course}/${slug}/`} label={entry.data.quiz.label} options={entry.data.quiz.options} />}
  <PaginatedCourse {...{ course, slug, title: entry.data.title }} />
</ContentLayout>

<script>
  import { LastURLUpsert, saveLastUrl } from '@stores/courses';
  import { getUser } from '@stores/auth';
  class AstroLessonWrapper extends HTMLElement {
    constructor() {
      super();
      if (!this?.dataset?.message) {
        return;
      }
      const data: LastURLUpsert = JSON.parse(this.dataset.message);

      this.saveUrlByUser(data);
    }

    saveUrlByUser = async (data: LastURLUpsert) => {
      try {
        const user = await getUser();
        if (user?.id) {
          data.id = user.id;
          await saveLastUrl(data);
        }
      } catch (error) {}
    };
  }
  customElements.define('astro-lesson-wrapper', AstroLessonWrapper);
</script>
