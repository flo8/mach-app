---
import { getAllCollectionLessons } from '@utils/collections';
import PaginatedCourse from '@components/PaginatedCourse.astro';
import ContentLayout from '@ContentLayout';
import Quiz from '@components/Quiz/Question.vue';
import TOC from '@components/TOC/index.astro';
import { CollectionEntry } from 'astro:content';
import { Collection, CourseParams } from '@models/courses';

interface Props {
  entry: CollectionEntry<Collection>;
  courses: CollectionEntry<Collection>[];
}
export async function getStaticPaths() {
  const courses = await getAllCollectionLessons('courses');

  return courses.map((entry) => {
    const directories = entry.slug.split('/');
    const course = [...directories].shift();
    const slug = [...directories].pop();

    return {
      params: { course, slug },
      props: { entry, courses: courses.filter((c) => c.slug.includes(`${course}/`)) }
    };
  });
}

const { course, slug: lessonSlug } = Astro.params;
const { entry, courses } = Astro.props;
const { Content, headings, remarkPluginFrontmatter } = await entry.render();

let params: CourseParams | undefined = undefined;
if (course && lessonSlug) {
  params = { course, slug: lessonSlug };
}
---

<ContentLayout frontmatter={remarkPluginFrontmatter} courseDir={Astro.props} params={params}>
  <!-- <TOC pageHeadings={headings} /> -->
  <Content />
  {entry?.data?.quiz && <Quiz client:only='vue' slug={`${course}/${slug}/`} label={entry.data.quiz.label} options={entry.data.quiz.options} />}

  <PaginatedCourse {...{ course, slug: lessonSlug, title: entry.data.title }} />
</ContentLayout>
